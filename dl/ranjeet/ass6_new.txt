import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Dense, Dropout, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications import VGG16

dataset_dir = "D:\Deep_Learning_code\LP-IV-datasets\Object Detection(Ass6)\caltech-101-img"
dataset_datagen = ImageDataGenerator(rescale=1.0/255)

dataset_generator = dataset_datagen.flow_from_directory(
    dataset_dir,
    target_size=(64,64),
    batch_size=2000,
    class_mode='categorical'
    
)

x_train, y_train = dataset_generator[0]
x_test, y_test = dataset_generator[1]

weights_path = r"D:\Deep_Learning_code\LP-IV-datasets\Object Detection(Ass6)\vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5"
base_model = VGG16(weights= weights_path, include_top=False, input_shape=(64,64,3))

for layer in base_model.layers:
    layer.trainable = False

x = Flatten()(base_model.output)
x = Dense(64, activation = 'relu')(x)
predictions  = Dense(102, activation = 'softmax')(x)

model = Model(inputs = base_model.input, outputs = predictions)
model.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
model.summary()

model.fit(x_train, y_train, batch_size= 64, epochs = 10, validation_data=(x_test, y_test))

for layer in base_model.layers[len(base_model.layers) - 2:]:
   layer.trainable = True
x = Flatten()(base_model.output)
x = Dense(512, activation = 'relu')(x)
x = Dropout(0.2)(x)
predictions = Dense(102, activation = 'softmax')(x)

model = Model(inputs= base_model.input, outputs = predictions)
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
model.fit(x_train, y_train, batch_size = 128, epochs = 10, validation_data=(x_test, y_test))

predicted_value = model.predict(x_test)
labels = list(dataset_generator.class_indices.keys())

n = 991

plt.imshow(x_test[n])
print("Preditcted: ",labels[np.argmax(predicted_value[n])])
print("Actual: ", labels[np.argmax(y_test[n])])